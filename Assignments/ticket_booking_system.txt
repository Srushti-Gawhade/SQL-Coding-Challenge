use ticket_booking_system;
show databases;

insert into venue(name, address) values
('mumbai', 'marol andheri(w)'),
('chennai', 'IT Park'),
('pondicherry', 'state beach');


insert into customer( name,email, phone_number)values
('harry potter', 'harry@gmail.com', '45454545'),
('ronald weasley', 'ron@gmail.com', '45454545'),
('hermione granger', 'her@gmail.com', '45454545'),
('draco malfoy', 'drac@gmail.com', '45454545'),
('ginni weasley','ginni@gmail.com', '45454545');

insert into event( name,date,time,total_seats,available_seats, ticket_price,event_type,venue_id)values
('Late Ms. Lata Mangeshkar Musical', '2021-09-12','20:00',320,270,600, 'concert', 3),
('CSK vs RCB', '2024-04-11', '19:30', 23000,3,3600, 'sports', 2),
('CSK vs RR', '2024-04-19', '19:30', 23000,10,3400, 'sports', 2),
('conference CUP', '2024-05-01', '15:30',28000,100,8000, 'sports', 1);

insert into booking (event_id,customer_id,num_tickets,total_cost,booking_date)values
(4,1,2,640,'2021-09-12'),
(4,4,3,960,'2021-09-12'),
(5,1,3,10800,'2024-04-11'),
(5,3,5,18000,'2024-04-10'),
(6,5,10,34000,'2024-04-15'),
(7,2,4,32000,'2024-05-01');

-- task 2
-- 1.Write a SQL query to list all Events. 
select * from event;

/*+----+----------------------------------+------------+----------+-------------+-----------------+--------------+------------+----------+
| id | name                             | date       | time     | total_seats | available_seats | ticket_price | event_type | venue_id |
+----+----------------------------------+------------+----------+-------------+-----------------+--------------+------------+----------+
|  1 | Late Ms. Lata Mangeshkar Musical | 2021-09-12 | 20:00:00 |         320 |             270 |          600 | concert    |        3 |
|  2 | CSK vs RCB                       | 2024-04-11 | 19:30:00 |       23000 |               3 |         3600 | sports     |        2 |
|  3 | CSK vs RR                        | 2024-04-19 | 19:30:00 |       23000 |              10 |         3400 | sports     |        2 |
|  4 | conference CUP                   | 2024-05-01 | 15:30:00 |       28000 |             100 |         8000 | sports     |        1 |
+----+----------------------------------+------------+----------+-------------+-----------------+--------------+------------+----------+*/

-- 2.Write a SQL query to select events with available tickets.
select name
from event 
where available_seats>=1;
/*
+----------------------------------+
| name                             |
+----------------------------------+
| Late Ms. Lata Mangeshkar Musical |
| CSK vs RCB                       |
| CSK vs RR                        |
| conference CUP                   |
+----------------------------------+*/

-- 3.Write a SQL query to retrieve customer information whose phone number end with '000'
select *
from customer
where phone_number like '%000';

/*output : null*/

-- 4.Write a SQL query to select events name partial match with 'cup'. 
select *
from event
where name like '%CUP%';

/*+----+----------------+------------+----------+-------------+-----------------+--------------+------------+----------+
| id | name           | date       | time     | total_seats | available_seats | ticket_price | event_type | venue_id |
+----+----------------+------------+----------+-------------+-----------------+--------------+------------+----------+
|  4 | conference CUP | 2024-05-01 | 15:30:00 |       28000 |             100 |         8000 | sports     |        1 |
+----+----------------+------------+----------+-------------+-----------------+--------------+------------+----------+*/

--  5.Write a SQL query to select events with ticket price range is between 1000 to 4000.
select name , ticket_price
from event
where ticket_price  between 1000 and 4000;

/*+------------+--------------+
| name       | ticket_price |
+------------+--------------+
| CSK vs RCB |         3600 |
| CSK vs RR  |         3400 |
+------------+--------------+*/

--  6.Write a SQL query to retrieve events with dates falling within a specific range.
select name
from Event
where date between '2024-02-10' and '2024-05-01';

/*+----------------+
| name           |
+----------------+
| CSK vs RCB     |
| CSK vs RR      |
| conference CUP |
+----------------+*/

-- 7.Write a SQL query to retrieve events with available tickets that also have "Concert" in their name.
select name 
from event
where available_seats>=1 
and event_type like '%concert%';

/*+----------------------------------+
| name                             |
+----------------------------------+
| Late Ms. Lata Mangeshkar Musical |
+----------------------------------+*/

--  8.Write a SQL query to retrieve users in batches of 5, starting from the 6th user.
select * from customer
limit 5,5;

/*
6	severus snape	sev@gmail.com	56556
*/

-- 9.Write a SQL query to retrieve bookings details contains booked no of ticket more than 4.
select *
from booking
where num_tickets>4;

/*+----------+-------------+----+-------------+------------+--------------+
| event_id | customer_id | id | num_tickets | total_cost | booking_date |
+----------+-------------+----+-------------+------------+--------------+
|        5 |           3 | 37 |           5 |      18000 | 2024-04-10   |
|        6 |           5 | 38 |          10 |      34000 | 2024-04-15   |
+----------+-------------+----+-------------+------------+--------------+*/

-- 10.Write a SQL query to retrieve the events in order whose seat capacity more than 15000.
select name, total_seats
from event
where total_seats>15000;

/*+----------------+-------------+
| name           | total_seats |
+----------------+-------------+
| CSK vs RCB     |       23000 |
| CSK vs RR      |       23000 |
| conference CUP |       28000 |
+----------------+-------------+*/

-- 11.Write a SQL query to select events name not start with 'xy
select name 
from event
where name not like 'xy%';

/*+----------------------------------+
| name                             |
+----------------------------------+
| Late Ms. Lata Mangeshkar Musical |
| CSK vs RCB                       |
| CSK vs RR                        |
| conference CUP                   |
+----------------------------------+*/

-- Tasks 3: Aggregate functions, Having, Order By, GroupBy and Joins:

--  1.Write a SQL query to List Events and Their Average Ticket Prices.
select e.name, avg(b.total_cost) as average_ticket_price
from event e, booking b
where e.id = b.event_id
group by e.name;

/*name           | average_ticket_price |
+----------------+----------------------+
| conference CUP |          800.0000*
CSK vs RCB                  14400.0000
CSK vs RR	                34000.0000
conference CUP	            32000.0000  */

-- 2.Write a SQL query to Calculate the Total Revenue Generated by Events.
select  e.name, SUM(b.total_cost) as total_revenue
from booking b, event e
where e.id = b.event_id
group by  e.name;

/*name           | total_revenue |
+----------------+---------------+
| conference CUP |          1600
  CSK vs RCB	           28800
  CSK vs RR	               34000
  conference CUP	       32000*/
  
-- 3.find the event with the highest ticket sales.
select  e.name, sum(b.total_cost) as highest_ticket_sales
from booking b, event e
where e.id=b.event_id
order by  e.name;

/*+----------------+----------------------+
| name           | highest_ticket_sales |
+----------------+----------------------+
| CSK vs RR      |                 34000|
+----------------+----------------------+*/

-- 4.Write a SQL query to Calculate the Total Number of Tickets Sold for Each Event.
select  e.name,  sum(b.num_tickets) as total_tickets_sold
from booking b, event e 
where e.id = b.event_id
group by b.event_id, e.name;

/*+----------------+--------------------+
| name           | total_tickets_sold |
+----------------+--------------------+
| Late Ms. Lata Mangeshkar Musical	5
  CSK vs RCB	                    8
  CSK vs RR	                       10
  conference CUP	                4 |
*/

-- 5.Write a SQL query to Find Events with No Ticket Sales.
select *
from  event  
where id NOT IN(select e.id
                from event e, booking b
                where e.id=b.event_id); 

-- 6.Write a SQL query to Find the User Who Has Booked the Most Tickets.
select  c.name, SUM(b.num_tickets) AS total_tickets_booked
from booking b , customer c
where e.ud=b.event_id AND b.customer_id=c.id
group by c.id,c.name
order by total_tickets_booked desc
limit 1;

/*name           | total_revenue |
ginni weasley	             10  */

-- 7.Write a SQL query to List Events and the total number of tickets sold for each month.
select b.event_id, e.name, MONTH(b.date) as month, SUM(num_tickets) 
from event e, booking b
where e.id = b.event_id
group by b.event_id, e.name, MONTH(b.date);

/*
+--------------------------
| event_name | month | sum |
+--  --------+-------+------+
| CSK vs RCB | 4     | 18  |
| MI vs KKR  | 5      | 4  |
| Late Ms. Lata Mangeshkar Musical | 9 | 5 |
+----------------------------------+-------+------+*/

-- 8.Write a SQL query to calculate the average Ticket Price for Events in Each Venue.
select v.name, AVG(ticket_price) as average_ticket_price
from event e, venue v
where e.venue_id=v.id
group by v.name;

/*
+-------------+---------+
| venue_name | average_ticket_price |
+-------------+---------+
| mumbai     | 6500    |
| chennai    | 3500    |
| pondicherry | 600    |
+-------------+---------+*/

-- 9.Write a SQL query to calculate the total Number of Tickets Sold for Each Event Type.
select event_type, SUM(b.num_tickets) AS total_tickets_sold
from event e, booking b
where e.id = b.event_id
group by e.event_type;

/*
+------------+---------------+
| event_type | total_tickets_sold |
+------------+---------------+
| concert    | 5                  |
| sports     | 22                 |
+------------+---------------+*/

-- 10.Write a SQL query to calculate the total Revenue Generated by Events in Each Year.
select YEAR(b.date) as year, SUM(ticket_price * num_tickets) as total_revenue
from event e, booking b
where e.id=b.event_id
group by YEAR(b.date);

/*
+------+------------+
| Year | total_revenue |
+------+------------+
| 2021 | 1600       |
| 2024 | 94800      |
+------+------------+*/

-- 11. Write a SQL query to list users who have booked tickets for multiple events.
select  c.*
from booking b, customer c
where c.id = b.customer_id
group by  c.name
having COUNT(distinct c.id) > 1;

/*
+---------------+-----------------+
| customer_name | email          | phone_number
+---------------+-----------------+
| harry potter | harry@gmail.com | 45454545
+---------------+-----------------+*/

-- 12. Write a SQL query to calculate the Total Revenue Generated by Events for Each User.
select c.name, SUM(total_cost) AS total_revenue
from booking b , event e, customer c
where e.id=b.event_id AND b.customer_id=c.id
group by b.customer_id;

/*
+------------------+---------------+
| customer_name    | total_revenue |
+------------------+---------------+
| harry potter     | 11440         |
| ronald weasley   | 32000         |
| hermione granger | 18000         |
| draco malfoy     | 960           |
| ginni weasley    | 34000          |
+------------------+-------+*/

-- 13. Write a SQL query to calculate the Average Ticket Price for Events in Each Category and Venue. 
SELECT event_type,  AVG(ticket_price) AS average_ticket_price
FROM Event e, venue v, booking b
where v.id = e.venue_id AND e.id=b.event_id
GROUP BY event_type;

/*
+------------+---------------------+
| event_type | average_ticket_price |
+------------+---------------------+
| concert    | 600                  |
| sports     | 4650                 |
+------------+---------------------+*/



-- Tasks 4: Subquery and its types

-- 1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery.
select v.name, AVg(e.ticket_price) as average_ticket_price
from venue v JOIN event e ON v.id=e.venue_id
group by v.name;

/*
+-------------+---------+
| venue_name  | average |
+-------------+---------+
| mumbai      | 6500    |
| chennai     | 3500    |
| pondicherry | 600     |
+-------------+---------+*/

select v.venue_name, avg(e.ticket_price) as average
from event e JOIN venue v ON e.venue_id=v.venue_id
group by v.venue_id;
/*
+-------------+---------+
| venue_name | average_ticket_price|
+-------------+---------+
| mumbai     | 6500     |
| chennai    | 3500     |
| pondicherry | 600     |
+-------------+---------+*/

-- 2.Find Events with more than 50% of Tickets Sold using subquery.

select *
from event
where(total_seats - available_seats)>(total_seats/2);

/*
+----------+----------------------+------------+------------+-------------+-----------------+--------------+------------+-------
| event_id | event_name | event_date | event_time | total_seats | available_seats | ticket_price | event_type | venue_id |
+----------+----------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
| 5        | CSK vs RCB | 2024-04-11 | 19:30      | 23000       | 3                | 3600        | sports     |   2        |
| 6        | CSK vs RR | 2024-04-19  | 19:30      | 23000       | 10               | 3400        | sports     |   2
| 7        | MI vs KKR | 2024-05-01  | 15:30      | 28000       | 100              | 8000        | sports     |    1
| 8  | Arijit Singh Musical | 2024-06-15 | 14:30  | 20000       | 150              | 5000        | concert    |    1
+----------+----------------------+------------+------------+-------------+-----------------+--------------+------------+-------
*/

-- 3. Calculate the Total Number of Tickets Sold for Each Event.
select name,SUM(total_seats - available_seats) as tickets_sold
from event
group by name;

/*
+----------------------------------+--------------+
| event_name                       | tickets_sold |
+----------------------------------+--------------+
| Late Ms. Lata Mangeshkar Musical | 50           |
| CSK vs RCB                       | 22997        |
| CSK vs RR                        | 22990        |
| MI vs KKR                        | 27900        |
| Arijit Singh Musical             | 19850        |
+----------------------------------+--------------+*/

-- 4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery.
/*projection - customer
criteria - booking
*/
select*
from customer
where NOT EXISTS(select distinct c.*
                    from customer c JOIN booking b ON c.id=b.customer_id);

/*
+-------------+---------------+---------------+--------------+
| customer_id | customer_name | email         | phone_number |
+-------------+---------------+---------------+--------------+
| 6           | severus snape | sev@gmail.com | 56556        |
| 7           | tom holland   | tom@gmail.com | 12345        |
+-------------+---------------+---------------+--------------+*/

-- 5. List Events with No Ticket Sales Using a NOT IN Subquery.
select *
from event
where id NOT IN(select e.id
				from event e, booking b
                where e.id=b.event_id);

/*+----------+----------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
| event_id   | event_name           | event_date | event_time | total_seats | available_seats | ticket_price | event_type | venue_id |
+----------+----------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
| 8        | Arijit Singh Musical | 2024-06-15 | 14:30      | 20000       | 150             | 5000         | concert    | 1        |
+----------+----------------------+------------+------------+-------------+-----------------+--------------+------------+----------+*/

-- 6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause.
select e.name, sum(total_seats-available_seats)
from (select * 
      from event) as dt
group by event_type;
/*
+----------------------------------+----------------------------------+
| event_name                       | sum(total_seats-available_seats) |
+----------------------------------+----------------------------------+
| Late Ms. Lata Mangeshkar Musical | 19900                            |
| CSK vs RCB                       | 73887                            |
+----------------------------------+----------------------------------+*/

-- 7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause.
SELECT id, name, ticket_price
FROM Event
WHERE ticket_price > (SELECT AVG(ticket_price)
                      FROM Event);
                      
/*
+----------+----------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
| event_id | event_name           | event_date | event_time | total_seats | available_seats | ticket_price | event_type | venue_id |
+----------+----------------------+------------+------------+-------------+-----------------+--------------+------------+----------+
| 7        | MI vs KKR            | 2024-05-01 | 15:30      | 28000       | 100             | 8000         | sports     |        1 |
| 8        | Arijit Singh Musical | 2024-06-15 | 14:30      | 20000       | 150             | 5000         | concert    |        1 |
+----------+----------------------+------------+------------+-------------+-----------------+--------------+------------+----------+*/

-- 8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery.
select c.name, sum(b.total_cost) as total
from customer c JOIN booking b ON c.id=b.customer_id
group by c.id; 

/*
+------------------+-------+
| c.name           | total |
+------------------+-------+
| harry potter     | 11440 |
| ronald weasley   | 32000 |
| hermione granger | 18000 |
| draco malfoy     | 960   |
| ginni weasley    | 34000 |
+------------------+-------+*/

-- 9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause.
select name,email
from customer
 where id in (select customer_id
			from booking
            where event_id in(select id
                              from event 
							  where venue_id in (select id
                                                 from venue 
                                                 where name='mumbai')));

/*
+------------------+-----------------+
| customer_name    | email           |
+------------------+-----------------+
| harry potter     | harry@gmail.com |
| hermione granger | her@gmail.com   |
| ginni weasley    | ginni@gmail.com 
| draco malfoy	   |  drac@gmail.com
| ginni weasley	   |  ginni@gmail.com|
+------------------+-----------------+*/

-- 10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery withGROUP BY
SELECT e.event_type, SUM(num_tickets) AS total_tickets_sold
FROM Event e
JOIN (SELECT e.id, SUM(num_tickets) AS total_tickets_sold
      FROM booking
      GROUP BY e.id)  ON e.event_id = e.id
GROUP BY e.event_type;

/*
+------------+--------------------+
| event_type |total_tickets_sold  |
+------------+--------------------+
| concert    | 5                  |
| sports     | 22                 |
+------------+--------------------+*/


-- 12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery
select v.name, AVG(e.ticket_price) as Average_Ticket_price 
from venue v 
JOIN event e ON v.id=e.venue_id
group by v.name;

/*
+-------------+---------------------+
| name        | Average_Ticket_price|
+-------------+---------------------+
| chennai     | 3500                |
| mumbai      | 8000                |
| pondicherry | 600                 |
+-------------+---------------------+*


