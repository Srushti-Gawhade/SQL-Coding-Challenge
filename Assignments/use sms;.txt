use sms;

INSERT INTO student (id, first_name, last_name, date_of_birth, email, phone_number) values
(1, 'John', 'Doe', '2000-01-01', 'john.doe@example.com', '123'),
(2, 'Jane', 'Smith', '2001-02-03', 'jane.smith@example.com', '234'),
(3, 'Alice', 'Johnson', '1999-05-15', 'alice.johnson@example.com', '345'),
(4, 'Bob', 'Williams', '2002-09-10', 'bob.williams@example.com', '456'),
(5, 'Emily', 'Brown', '1998-11-20', 'emily.brown@example.com', '567');

INSERT INTO teacher (id, first_name, last_name, email) values
(1, 'Harry', 'Potter', 'harry.potter@example.com'),
(2, 'Hermione', 'Granger', 'hermoine.grangerexample.com'),
(3, 'Ron', 'Weasley', 'ron.weasley@example.com'),
(4, 'Albus', 'Dumbledore', 'albus.dumbledore@example.com'),
(5, 'Severus', 'Snape', 'severus.snape@example.com');

INSERT INTO courses (id, course_name, credits, teacher_id) values
(1, 'Potions', 3, 4),
(2, 'Defense Against the Dark Arts', 4, 5),
(3, 'Transfiguration', 3, 4),
(4, 'Charms', 3, 3),
(5, 'Herbology', 2, 2);

INSERT INTO enrollments (enrollmentID, enrollment_date, courses_id, student_id) values
(1, '2024-04-09', 3, 1),
(2, '2024-04-09', 5, 2),
(3, '2024-04-09', 4, 3),
(4, '2024-04-09', 2, 4),
(5, '2024-04-09', 1, 5);

INSERT INTO payments (id, amount, payment_date, student_id) values
(1, 200, '2024-04-09', 1),
(2, 75, '2024-04-09', 2),
(3, 60, '2024-04-09', 3),
(4, 90, '2024-04-09', 4),
(5, 55, '2024-04-09', 5);

-- Tasks 2: Select, Where, Between, AND, LIKE:

/* Q1 Write an SQL query to insert a new student into the "Students" table with the following 
details:
a. First Name: John
b. Last Name: Doe
c. Date of Birth: 1995-08-15
d. Email: john.doe@example.com
e. Phone Number: 1234567890
*/ 
insert into students(first_name, last_name, date_of_birth, email, phone_number)
values ('John','Doe','1995-08-15','john.doe@gmail.com','1234567890');

-- 2. Write an SQL query to enroll a student in a course. Choose an existing student and course and insert a record into the "Enrollments" table with the enrollment date.
INSERT INTO Enrollments (enrollment_date, courses_id, student_id)values ('2024-04-12', 3, 6);

-- 3. Update the email address of a specific teacher in the "Teacher" table. Choose any teacher and modify their email address.
UPDATE teacher
SET email = 'newemail@example.com'
WHERE id = 2;

-- 4. Write an SQL query to delete a specific enrollment record from the "Enrollments" table. Select an enrollment record based on the student and course.
DELETE FROM Enrollments
WHERE courses_id = 5 AND student_id = 2;

-- 5. Update the "Courses" table to assign a specific teacher to a course. Choose any course and teacher from the respective tables.
UPDATE Courses
SET teacher_id = 3
WHERE id = 4;

-- 6. Delete a specific student from the "Students" table and remove all their enrollment records from the "Enrollments" table. Be sure to maintain referential integrity.
DELETE FROM Enrollments
WHERE student_id = 5;

DELETE FROM Students
WHERE id = student_id;

-- 7. Update the payment amount for a specific payment record in the "Payments" table. Choose any payment record and modify the payment amount.
UPDATE Payments
SET amount = 200
WHERE id = 1;


-- Task 3. Aggregate functions, Having, Order By, GroupBy and Joins:

-- 1. Write an SQL query to calculate the total payments made by a specific student. You will need to join the "Payments" table with the "Students" table based on the student's ID.
SELECT s.*, sum(amount) as Total_Payment
FROM student s
JOIN payments p ON s.id = p.student_id
WHERE s.id=1
GROUP BY s.id;
/*
+----+------------+-----------+---------------+----------------------+--------------+---------------+
| id | first_name | last_name | date_of_birth | email                | phone_number | Total_Payment |
+----+------------+-----------+---------------+----------------------+--------------+---------------+
|  1 | John       | Doe       | 2000-01-01    | john.doe@example.com |          123 |           200 |
+----+------------+-----------+---------------+----------------------+--------------+---------------+*/

-- 2. Write an SQL query to retrieve a list of courses along with the count of students enrolled in each course. Use a JOIN operation between the "Courses" table and the "Enrollments" table.
SELECT c.course_name, count(s.id)
FROM courses c
JOIN enrollments e ON c.id = e.courses_id
GROUP BY c.id;
/*
+-----------------+---------------------+
| course_name     | count(enrollmentid) |
+-----------------+---------------------+
| Potions         |                   1 |
| Transfiguration |                   1 |
| Charms          |                   1 |
| Herbology       |                   1 |
+-----------------+---------------------+*/

-- 3. Write an SQL query to find the names of students who have not enrolled in any course. Use a LEFT JOIN between the "Students" table and the "Enrollments" table to identify students without enrollments.
SELECT s.first_name, s.last_name
FROM student s
LEFT JOIN enrollments e ON s.id = e.student_id
WHERE e.student_id IS NULL;
/*
+------------+-----------+
| first_name | last_name |
+------------+-----------+
| Bob        | Williams  |
| Mickey     | Mouse     |
+------------+-----------+*/

-- 4. Write an SQL query to retrieve the first name, last name of students, and the names of the courses they are enrolled in. Use JOIN operations between the "Students" table and the "Enrollments" and "Courses" tables.
SELECT s.first_name, s.last_name, c.course_name
FROM student s
JOIN enrollments e ON s.id = e.student_id
JOIN courses c ON e.courses_id = c.id;
/*
+------------+-----------+-----------------+
| first_name | last_name | course_name     |
+------------+-----------+-----------------+
| Emily      | Brown     | Potions         |
| John       | Doe       | Transfiguration |
| Alice      | Johnson   | Charms          |
| Jane       | Smith     | Herbology       |
+------------+-----------+-----------------+*/

-- 5. Create a query to list the names of teachers and the courses they are assigned to. Join the "Teacher" table with the "Courses" table.
SELECT t.first_name, t.last_name, c.course_name
FROM teacher t
JOIN courses c ON t.id = c.teacher_id;
/*
+------------+------------+-------------------------------+
| first_name | last_name  | course_name                   |
+------------+------------+-------------------------------+
| Albus      | Dumbledore | Potions                       |
| Severus    | Snape      | Defense Against the Dark Arts |
| Albus      | Dumbledore | Transfiguration               |
| Ron        | Weasley    | Charms                        |
| Hermione   | Granger    | Herbology                     |
+------------+------------+-------------------------------+*/

-- 6. Retrieve a list of students and their enrollment dates for a specific course. You'll need to join the "Students" table with the "Enrollments" and "Courses" tables.
SELECT s.first_name, s.last_name, e.enrollment_date
FROM student s
JOIN enrollments e ON s.id = e.student_id
JOIN courses c ON e.courses_id = c.id
WHERE c.course_name = 'Transfiguration ';
/*
+------------+-----------+-----------------+
| first_name | last_name | enrollment_date |
+------------+-----------+-----------------+
| John       | Doe       | 2024-04-09      |
+------------+-----------+-----------------+*/

-- 7. Find the names of students who have not made any payments. Use a LEFT JOIN between the "Students" table and the "Payments" table and filter for students with NULL payment records.
SELECT s.first_name, s.last_name
FROM student s
LEFT JOIN payments p ON s.id = p.student_id
WHERE p.student_id IS NULL;
/*
+------------+-----------+
| first_name | last_name |
+------------+-----------+
| Mickey     | Mouse     |
+------------+-----------+*/

-- 8. Write a query to identify courses that have no enrollments. You'll need to use a LEFT JOIN between the "Courses" table and the "Enrollments" table and filter for courses with NULL enrollment records.
SELECT c.course_name
FROM courses c
LEFT JOIN enrollments e ON c.id = e.courses_id
WHERE e.enrollmentid IS NULL;
/*
+-------------------------------+
| course_name                   |
+-------------------------------+
| Defense Against the Dark Arts |
+-------------------------------+*/

-- 9. Identify students who are enrolled in more than one course. Use a self-join on the "Enrollments" table to find students with multiple enrollment records.
SELECT e.student_id
FROM Enrollments e
GROUP BY e.student_id
HAVING COUNT(e.courses_id) > 1;
/*null*/

-- 10. Find teachers who are not assigned to any courses. Use a LEFT JOIN between the "Teacher" table and the "Courses" table and filter for teachers with NULL course assignments.
SELECT t.id, t.first_name, t.last_name
FROM teacher t
LEFT JOIN courses c ON t.id = c.teacher_id
WHERE c.courses_id IS NULL;
/*
+----+------------+-----------+
| id | first_name | last_name |
+----+------------+-----------+
|  1 | Harry      | Potter    |
+----+------------+-----------+*/

-- Task 4. Subquery and its type:

-- 1. Write an SQL query to calculate the average number of students enrolled in each course. Use aggregate functions and subqueries to achieve this.
SELECT c.course_name, avg(s.id) as average
FROM student s 
JOIN enrollments e ON s.id =e.student_id
JOIN courses c ON c.id=e.courses_id
GROUP BY c.id;
/*
+-----------------+---------+
| course_name     | average |
+-----------------+---------+
| Potions         |  5.0000 |
| Transfiguration |  1.0000 |
| Charms          |  3.0000 |
| Herbology       |  2.0000 |
+-----------------+---------+*/

-- 2. Identify the student(s) who made the highest payment. Use a subquery to find the maximum payment amount and then retrieve the student(s) associated with that amount.
SELECT s.*,p.amount
FROM student s 
JOIN payments p ON s.id=p.student_id
ORDER BY p.amount DESC
limit 1;
/*
+----+------------+-----------+---------------+----------------------+--------------+--------+
| id | first_name | last_name | date_of_birth | email                | phone_number | amount |
+----+------------+-----------+---------------+----------------------+--------------+--------+
|  1 | John       | Doe       | 2000-01-01    | john.doe@example.com |          123 |    200 |
+----+------------+-----------+---------------+----------------------+--------------+--------+*/

 -- 3. Retrieve a list of courses with the highest number of enrollments. Use subqueries to find the course(s) with the maximum enrollment count.
SELECT c.*,count(e.courses_id) as 'num_of_enrollment' 
FROM courses c 
JOIN enrollments e ON c.id = e.courses_id 
GROUP BY c.course_name 
ORDER BY num_of_enrollment desc ;
/*
+----+-----------------+---------+------------+-------------------+
| id | course_name     | credits | teacher_id | num_of_enrollment |
+----+-----------------+---------+------------+-------------------+
|  5 | Herbology       |       2 |          2 |                 1 |
|  1 | Potions         |       3 |          4 |                 1 |
|  3 | Transfiguration |       3 |          4 |                 1 |
|  4 | Charms          |       3 |          3 |                 1 |
+----+-----------------+---------+------------+-------------------+*/

-- 4. Calculate the total payments made to courses taught by each teacher. Use subqueries to sum payments for each teacher's courses.
SELECT t.id, t.first_name, t.last_name, SUM(p.amount) AS total_payments
FROM teacher t
JOIN courses c ON t.id = c.teacher_id
JOIN enrollments e ON c.id = e.courses_id
JOIN payments p ON e.student_id = p.student_id
GROUP BY t.id;
/*
+----+------------+------------+----------------+
| id | first_name | last_name  | total_payments |
+----+------------+------------+----------------+
|  2 | Hermione   | Granger    |             75 |
|  3 | Ron        | Weasley    |             60 |
|  4 | Albus      | Dumbledore |            255 |
+----+------------+------------+----------------+*/

-- 5. Identify students who are enrolled in all available courses. Use subqueries to compare a student's enrollments with the total number of courses.
SELECT student_id
FROM enrollments
GROUP BY student_id
HAVING COUNT(DISTINCT courses_id) = (SELECT COUNT(*) FROM Courses);
/*null*/

-- 6. Retrieve the names of teachers who have not been assigned to any courses. Use subqueries to find teachers with no course assignments.
SELECT id, first_name, last_name
FROM teacher
WHERE id NOT IN (SELECT DISTINCT teacher_id FROM Courses);
/*
+----+------------+-----------+
| id | first_name | last_name |
+----+------------+-----------+
|  1 | Harry      | Potter    |
+----+------------+-----------+*/

-- 7. Calculate the average age of all students. Use subqueries to calculate the age of each student based on their date of birth.
SELECT avg(TIMESTAMPDIFF(YEAR, date_of_birth, CURDATE())) AS average_age
FROM student;

/*output:35.3333*/

-- 8. Identify courses with no enrollments. Use subqueries to find courses without enrollment records. 
SELECT id, course_name
FROM courses
WHERE id NOT IN (SELECT DISTINCT courses_id FROM enrollments);
/*
+----+-------------------------------+
| id | course_name                   |
+----+-------------------------------+
|  2 | Defense Against the Dark Arts |
+----+-------------------------------+*/

-- 9. Calculate the total payments made by each student for each course they are enrolled in. Use subqueries and aggregate functions to sum payments.
SELECT s.*, sum(p.amount) as total_payment
FROM student s 
JOIN enrollments e ON s.id=e.student_id
JOIN courses c ON c.id=e.courses_id
JOIN payments p ON s.id=p.student_id
JOIN teacher t ON c.teacher_id=t.id
GROUP BY s.id;
/*
+----+------------+-----------+---------------+---------------------------+--------------+---------------+
| id | first_name | last_name | date_of_birth | email                     | phone_number | total_payment |
+----+------------+-----------+---------------+---------------------------+--------------+---------------+
|  1 | John       | Doe       | 2000-01-01    | john.doe@example.com      |          123 |           200 |
|  2 | Jane       | Smith     | 2001-02-03    | jane.smith@example.com    |          234 |            75 |
|  3 | Alice      | Johnson   | 1999-05-15    | alice.johnson@example.com |          345 |            60 |
|  5 | Emily      | Brown     | 1998-11-20    | emily.brown@example.com   |          567 |            55 |
+----+------------+-----------+---------------+---------------------------+--------------+---------------+*/

-- 10. Identify students who have made more than one payment. Use subqueries and aggregate functions to count payments per student and filter for those with counts greater than one.
SELECT student_id
FROM Payments
GROUP BY student_id
HAVING COUNT(*) > 1;
/*null*/

-- 11. Write an SQL query to calculate the total payments made by each student. Join the "Students" table with the "Payments" table and use GROUP BY to calculate the sum of payments for each student.
SELECT s.*, sum(p.amount) as 'total payment'
FROM student s 
JOIN payments p ON s.id=p.student_id
GROUP BY s.id;
/*
----+------------+-----------+---------------+---------------------------+--------------+---------------+
| id | first_name | last_name | date_of_birth | email                     | phone_number | total payment |
+----+------------+-----------+---------------+---------------------------+--------------+---------------+
|  1 | John       | Doe       | 2000-01-01    | john.doe@example.com      |          123 |           200 |
|  2 | Jane       | Smith     | 2001-02-03    | jane.smith@example.com    |          234 |            75 |
|  3 | Alice      | Johnson   | 1999-05-15    | alice.johnson@example.com |          345 |            60 |
|  4 | Bob        | Williams  | 2002-09-10    | bob.williams@example.com  |          456 |            90 |
|  5 | Emily      | Brown     | 1998-11-20    | emily.brown@example.com   |          567 |            55 |
+----+------------+-----------+---------------+---------------------------+--------------+---------------+*/

-- 12. Retrieve a list of course names along with the count of students enrolled in each course. Use JOIN operations between the "Courses" table and the "Enrollments" table and GROUP BY to count enrollments.
SELECT c.course_name, COUNT(e.student_id) AS num_students_enrolled
FROM courses c
LEFT JOIN enrollments e ON c.id = e.courses_id
GROUP BY c.course_name;
/*
+-------------------------------+-----------------------+
| course_name                   | num_students_enrolled |
+-------------------------------+-----------------------+
| Charms                        |                     1 |
| Defense Against the Dark Arts |                     0 |
| Herbology                     |                     1 |
| Potions                       |                     1 |
| Transfiguration               |                     1 |
+-------------------------------+-----------------------*/

-- 13. Calculate the average payment amount made by students. Use JOIN operations between the"Students" table and the "Payments" table and GROUP BY to calculate the average.
SELECT s.first_name,s.last_name, avg(p.amount) as average_payment_amount
FROM student s 
JOIN payments p ON s.id=p.student_id
GROUP BY s.id;
/*
+------------+-----------+------------------------+
| first_name | last_name | average_payment_amount |
+------------+-----------+------------------------+
| John       | Doe       |                    200 |
| Jane       | Smith     |                     75 |
| Alice      | Johnson   |                     60 |
| Bob        | Williams  |                     90 |
| Emily      | Brown     |                     55 |
+------------+-----------+------------------------+*/