use banking_system_assignment;
show tables;

-- task 1

insert into customer(first_name,last_name,dob,email,city) values 
('harry','potter','2002-03-21','harrypotter@gmail.com','mumbai'),
('ronald','weasley','2001-02-10','ronaldweasley@gmail.com','chennai'),
('hermione','granger','2002-11-15','germoinegranger@gmail.com','pondicherry');

insert into account(account_type,balance,customer_id) values 
('savings',50000,1) ,
('current',120000,2) ,
('zero_balance',100000,3),
('current',150000,1) ,
('savings',30000,3);

insert into transaction(transaction_type,amount,transaction_date,account_id) values 
('deposit', 10000, '2024-02-01',1),
('withdrawal', 5000, '2024-02-02',1),
('deposit', 20000, '2024-02-02',2),
('withdrawal', 8000, '2024-02-02',3),
('transfer', 20000, '2024-02-01',4),
('transfer', 7000, '2024-02-05',5);

-- Task 2
use banking_system_assignment;

-- 1. Write a SQL query to retrieve the name, account type and email of all customers. 
select c.id, c.first_name, a.account_type, c.email
from customer c , account a
where c.id = a.customer_id
group by c.id, c.first_name;

/*output:
harry	     savings	 harrypotter@gmail.com
ronald	     current	ronaldweasley@gmail.com
hermione	zero_balance	germoinegranger@gmail.com

*/
-- 2. Write a SQL query to list all transaction corresponding customer.
SELECT transaction_type, amount, balance
FROM transaction t JOIN account a ON a.id = t.account_id
				   JOIN customer c ON c.id = a.customer_id;

/*output:
deposit	10000	50000
withdrawal	5000	50000
deposit	20000	125000
withdrawal	8000	100000
transfer	20000	150000
*/
-- 3. Write a SQL query to increase the balance of a specific account by a certain amount.????????????
UPDATE account
SET balance = balance + 5000
WHERE id = 2;


-- 4. Write a SQL query to Combine first and last names of customers as a full_name.
SELECT CONCAT(first_name, ' ', last_name) AS full_name
FROM Customer;

/*output:
harry potter
ronald weasley
hermione granger
*/
-- 5. Write a SQL query to remove accounts with a balance of zero where the account type is savings.
delete from account
where balance = 0 and account_type = 'savings';

-- 6. Write a SQL query to Find customers living in a specific city.
select first_name
from customer
where city = 'mumbai';

/*output:
harry
*/

-- 7. Write a SQL query to Get the account balance for a specific account.
SELECT balance
FROM Account
WHERE id = 1;

/*output:
50000
*/

-- 8. Write a SQL query to List all current accounts with a balance greater than $1,000.
select *
from account
where account_type='current' AND balance>1000;

/*output:
2	current	125000	2
4	current	150000	1
*/

-- 9. Write a SQL query to Retrieve all transactions for a specific account.
select account_id, transaction_type, amount
from transaction
group by account_id;

/*output:
1	deposit	10000
2	deposit	20000
3	withdrawal	8000
4	transfer	20000
5	transfer	7000
*/

-- 10. Write a SQL query to Calculate the interest accrued on savings accounts based on a given interest rate.


-- 11. Write a SQL query to Identify accounts where the balance is less than a specified overdraft limit.


-- 12. Write a SQL query to Find customers not living in a specific city.
SELECT *
FROM Customer
WHERE city <> 'chennai';

/*output:
4	harry	potter	2002-03-21	harrypotter@gmail.com	mumbai
6	hermione	granger	2002-11-15	germoinegranger@gmail.com	pondicherry
*/

-- Tasks 3: Aggregate functions, Having, Order By, GroupBy and Joins:
-- 1. Write a SQL query to Find the average account balance for all customers. 
SELECT AVG(balance) AS average_balance
FROM Account;

/*output:
91000.0000
*/
-- 2. Write a SQL query to Retrieve the top 10 highest account balances.
SELECT id, balance
FROM account
ORDER BY balance DESC
LIMIT 3;

/*output:
4	150000
2	125000
3	100000
*/

-- 3. Write a SQL query to Calculate Total Deposits for All Customers in specific date.
SELECT SUM(amount) AS total_deposits
FROM Transaction
WHERE transaction_type = 'deposit'
AND transaction_date = '2024-02-01';

/*output:
 10000 */
 
-- 4. Write a SQL query to Find the Oldest and Newest Customers.?????????????
(SELECT first_name,dob 
 FROM customer 
 ORDER BY dob ASC limit 1)
UNION
(SELECT first_name,dob 
 FROM customer 
 ORDER BY dob DESC limit 1);
/*
+------------+------------+
| first_name | dob        |
+------------+------------+
| ronald     | 2001-02-10 |
| hermione   | 2002-11-15 |
+------------+------------+*/

-- 5. Write a SQL query to Retrieve transaction details along with the account type.
SELECT t.*,a.account_type
FROM transaction t
JOIN account a ON t.account_id = a.id;

/*output:
1	deposit	10000	2024-02-01	1	savings
2	withdrawal	5000	2024-02-02	1	savings
3	deposit	20000	2024-02-02	2	current
4	withdrawal	8000	2024-02-02	3	zero_balance
5	transfer	20000	2024-02-01	4	current
6	transfer	7000	2024-02-05	5	savings

*/

-- 6. Write a SQL query to Get a list of customers along with their account details.
SELECT c.first_name,a.*
FROM customer c
JOIN account a ON c.id = a.customer_id;

/*output:
harry	1	savings	50000	1
ronald	2	current	125000	2
hermione	3	zero_balance	100000	3
harry	4	current	150000	1
hermione	5	savings	30000	3
*/

-- 7. Write a SQL query to Retrieve transaction details along with customer information for a specific account.
SELECT c.*, t.*
FROM transaction t
JOIN account a ON t.account_id = a.id
JOIN customer c ON a.customer_id = c.id
WHERE t.account_id = 3;

/*output:
3	hermione	granger	2002-11-15			4	withdrawal	8000	2024-02-02	3
*/

-- 8. Write a SQL query to Identify customers who have more than one account.
SELECT customer_id, COUNT(id) AS num_accounts
FROM account
GROUP BY customer_id
HAVING COUNT(id) > 1;

/*output:
customer_id    num_accounts
1	             2
3	             2
*/
-- 9. Write a SQL query to Calculate the difference in transaction amounts between deposits and withdrawals.?????????
(SELECT sum(amount) 
 FROM transaction
 WHERE type='deposit') 
UNION
(SELECT sum(amount) 
 FROM transaction
 WHERE type='withdrawal') ;
/*
+-------------+
| sum(amount) |
+-------------+
| 30000       |
| 13000       |
+-------------+*/

-- 10. Write a SQL query to Calculate the average daily balance for each account over a specified period.???????????????
SELECT account_id, AVG(balance) AS average_daily_balance
FROM account a
JOIN transaction t ON t.account_id = a.id
GROUP BY account_id;

/*output:
1	50000.0000
2	125000.0000
3	100000.0000
4	150000.0000
5	30000.0000
*/

-- 11. Calculate the total balance for each account type.
SELECT account_type, SUM(balance) AS total_balance
FROM Account
GROUP BY account_type;

/*output:
current	        275000
savings     	80000
zero_balance	100000
*/

-- 12. Identify accounts with the highest number of transactions order by descending order.
SELECT account_id, COUNT(*) AS num_transactions
FROM Transaction
GROUP BY account_id
ORDER BY num_transactions DESC;
/*output:
account_id  num_transactions
1	             2
2	             1
3	             1
4	             1
5	             1
*/

-- 13. List customers with high aggregate account balances, along with their account types.
SELECT c.id, c.first_name, a.account_type, SUM(a.balance) AS total_balance
FROM customer c
JOIN account a ON c.id = a.customer_id
GROUP BY c.id, c.first_name, a.account_type
ORDER BY total_balance DESC;

/*output:
1	harry	   current	       150000
2	ronald	   current	       125000
3	hermione   zero_balance	   100000
1	harry	   savings	       50000
3	hermione   savings	       30000
*/


-- Task 4: : Subquery and its type:
-- 1. Retrieve the customer(s) with the highest account balance.
SELECT customer_id, balance
FROM account
where customer_id IN(SELECT id
                     FROM customer)
order by balance DESC
limit 1;
/*output:
id   balance
1	150000
*/

-- 2. Calculate the average account balance for customers who have more than one account.
SELECT AVG(balance) AS average_balance
FROM Account
WHERE customer_id IN (SELECT customer_id
                      FROM Account
                      GROUP BY customer_id
                      HAVING COUNT(*) > 1);

/*output:
82500.0000
*/

-- 3. Retrieve accounts with transactions whose amounts exceed the average transaction amount.
SELECT *
FROM Account
WHERE id IN (SELECT account_id
			 FROM Transaction
			 WHERE amount > (SELECT AVG(amount) FROM Transaction));
            
/*ouput:
2	current	125000	2
4	current	150000	1
*/

-- 4. Identify customers who have no recorded transactions.
SELECT *
FROM Customer
WHERE id  IN (SELECT DISTINCT customer_id 
				 FROM account
                 where id NOT IN(select account_id
                             from transaction));

/*
+----+------------+-----------+------------+
| id | first_name | last_name | dob |
+----+------------+-----------+------------+
| 4  | tom         | holland   | 2003-05-16 |
+----+------------+-----------+------------+*/

-- 5. Calculate the total balance of accounts with no recorded transactions.
SELECT SUM(balance) AS total_balance
FROM Account
WHERE id NOT IN (SELECT DISTINCT account_id 
				 FROM Transaction
                 WHERE  a.id=t.account_id );

-- 6. Retrieve transactions for accounts with the lowest balance.
SELECT *
FROM Transaction
WHERE account_id IN (SELECT id
					 FROM Account
					 ORDER BY balance ASC
					 LIMIT 1);

/*
+----+---------+--------+------------+------------+---------+
| id | type    | amount | date       | account_id | balance |
+----+---------+--------+------------+------------+---------+
| 1  | deposit | 10000  | 2024-02-01 | 1          | 75000   |
+----+---------+--------+------------+------------+---------+*/

-- 7. Identify customers who have accounts of multiple types.
SELECT DISTINCT id, first_name
FROM Customer
WHERE id IN (SELECT customer_id
			 FROM Account
			 GROUP BY customer_id
		     HAVING COUNT(id) > 1);

/*
+----+------------+-----------+------------+
| id | first_name | last_name | dob        |
+----+------------+-----------+------------+
| 1  | harry      | potter    | 2002-03-21 |
| 3  | hermione   | granger   | 2002-11-15 |
+----+------------+-----------+------------+*/

-- 8. Calculate the percentage of each account type out of the total number of accounts.
SELECT *, count(account_type)/(SELECT count(id) FROM account)*100 as percentage
FROM Account
GROUP BY account_type;

/*
+----+--------------+---------+-------------+------------+
| id | type         | balance | customer_id | percentage |
+----+--------------+---------+-------------+------------+
| 2  | current      | 120000  | 2           | 40.0000    |
| 1  | savings      | 50000   | 1           | 40.0000    |
| 3  | zero_balance | 100000  | 3           | 20.0000    |
+----+--------------+---------+-------------+------------+*/

-- 9. Retrieve all transactions for a customer with a given customer_id.
SELECT *
FROM transaction
WHERE account_id IN (SELECT id
                      FROM account
                      WHERE customer_id = 1);
                      
/*
+----+------------+-----------+------------+----+---------+---------+-------------+----+------------+--------+------------+------------+
| id | first_name | last_name | dob        | id | type    | balance | customer_id | id | type       | amount | date       | account_id |
+----+------------+-----------+------------+----+---------+---------+-------------+----+------------+--------+------------+------------+
| 1  | harry      | potter    | 2002-03-21 | 1  | savings | 75000   | 1           | 1  | deposit    | 10000  | 2024-02-01 | 1          |
| 1  | harry      | potter    | 2002-03-21 | 1  | savings | 75000   | 1           | 2  | withdrawal | 5000   | 2024-02-02 | 1          |
| 1  | harry      | potter    | 2002-03-21 | 4  | current | 75000   | 1           | 5  | transfer   | 20000  | 2024-02-01 | 4          |
+----+------------+-----------+------------+----+---------+---------+-------------+----+------------+--------+------------+------------+*/

-- 10. Calculate the total balance for each account type, including a subquery within the SELECT clause.
SELECT account_type, sum(balance) as total_balance
FROM account
GROUP BY account_type;

/*
+--------------+---------------+
| type         | total_balance |
+--------------+---------------+
| current      | 195000        |
| savings      | 105000        |
| zero_balance | 125000        |
+--------------+---------------+*/